apply plugin: "android-library"

configurations {
    natives
    provided
    provided.extendsFrom(compile)
}

dependencies {
    //compile fileTree(dir: 'libs', include: '*.jar') //TODO make provided the jar
    compile files('libs/mediationsdk-6.4.0.jar')
    compile "com.underwaterapps.submarine:core:$CORE_VERSION", { changing = true }
	compile "com.google.android.gms:play-services-ads:$gms_library_version"
}

android {
    compileSdkVersion android_compile_version
    buildToolsVersion android_version
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    classpath {
        plusConfigurations += [project.configurations.compile]
        plusConfigurations += [configurations.provided]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = "submarine-supersonic-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]
        scopes += [PROVIDED: [plus: [configurations.provided]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}

ext {
    VERSION_NAME = SUPERSONIC_VERSION
    POM_ARTIFACT_ID = 'supersonic-android'

    POM_NAME = 'supersonic-android'
    POM_PACKAGING = 'aar'
    POM_DESCRIPTION = 'Core functionality for supersonic android'
}
